(()=>{let e=null;async function t(t,o,s=""){try{return e||await async function(t,r){e=await ai.languageModel.create({...t,systemPrompt:`You are helping a user understand and answer questions about this article: "${r}".`})}(o,s),console.log("Running prompt",t),e.prompt(t)}catch(e){throw console.error("Prompt failed:",e),r(),e}}async function r(){e&&e.destroy(),e=null}chrome.runtime.onMessage.addListener(((e,o,s)=>{const n={temperature:.7,topK:5};if("get_active_tab"===e.action)return chrome.tabs.query({active:!0,currentWindow:!0},(e=>{e&&e.length>0?s({tabId:e[0].id}):s({error:"No active tab found"})})),!0;if("extract_content"===e.action)return chrome.tabs.query({active:!0,currentWindow:!0},(e=>{e[0]?.id?chrome.tabs.sendMessage(e[0].id,{action:"extract_content"},(e=>{s(e)})):s({error:"No active tab found"})})),!0;if("summarize_page"===e.action){const o=e.content;return r().then((()=>{t('Generate 5 questions and answers based on the key points of the article. \n        Structure the response like this "question: {questions} answer: {answer}" no other text or formatting.',n,o).then((e=>{const t=e.split("\n\n").map((e=>{const t=e.split("\n").map((e=>e.trim())),r=t.find((e=>e.startsWith("question:"))),o=t.find((e=>e.startsWith("answer:")));return r&&o?{question:r.replace(/^question:\s*/i,"").trim(),answer:o.replace(/^answer:\s*/i,"").trim(),userAnswer:null}:null})).filter((e=>null!==e));chrome.tabs.query({active:!0,currentWindow:!0},(e=>{if(e[0]?.url){const r=new URL(e[0].url).origin;chrome.storage.local.get("history",(e=>{const o=e.history||{};o[r]||(o[r]=[]),t.forEach((e=>{o[r].push(e)})),chrome.storage.local.set({history:o},(()=>{console.log(`History updated for ${r}:`,o[r])}))}))}})),chrome.storage.local.set({questionAnswerPairs:t},(()=>{console.log("Question answer pairs stored",t),s({success:!0,questionAnswerPairs:t})}))})).catch((e=>{console.error("Error summarizing content:",e),s({success:!1,error:e})}))})),!0}if("validate_answer"===e.action){const{question:r,userAnswer:o,index:n}=e;return async function(e,r){return t(`Under the context of the above article, score the answer to this question: "${e}" \n  with the user answer: "${r}". \n  Respond with a score between 0 and 10 based on the correctness of the answer. \n  Return in this format: "Your Score: {score}/10".\n  After that, give me a paragraph that explores the key concepts in the question in more detail. `,{temperature:.7,topK:5})}(r,o).then((e=>{chrome.tabs.query({active:!0,currentWindow:!0},(t=>{if(t[0]?.url){const e=new URL(t[0].url).origin;chrome.storage.local.get("history",(t=>{const s=t.history||{};if(s[e]){const t=s[e].find((e=>e.question===r));t&&(t.userAnswer=o)}chrome.storage.local.set({history:s},(()=>{console.log(`History updated with user answer for ${e}:`,s[e])}))}))}t[0]?.id&&chrome.tabs.sendMessage(t[0].id,{action:"display_feedback",feedback:e,index:n})})),s({success:!0})})).catch((e=>{console.error("Error validating answer:",e),s({success:!1,error:e})})),!0}if("get_history"===e.action){const{siteUrl:t}=e;return chrome.storage.local.get("history",(e=>{const r=e.history||{};s(t?{success:!0,history:r[t]||[]}:{success:!0,history:r})})),!0}return"start_highlight_mode"===e.action?(chrome.tabs.query({active:!0,currentWindow:!0},(t=>{t[0]?.id&&chrome.tabs.sendMessage(t[0].id,e,(e=>{chrome.runtime.lastError?console.error("Error forwarding message:",chrome.runtime.lastError.message):s(e)}))})),!0):void 0}))})();